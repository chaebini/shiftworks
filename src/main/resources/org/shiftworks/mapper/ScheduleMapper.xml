<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.shiftworks.mapper.ScheduleMapper">

	<!-- 각 일정을 DB에 등록 -->
	<insert id="insertSchedule">
		INSERT INTO schedule(sch_id, dept_id, book_id, sch_title, sch_content, start_date, end_date, sch_group, emp_id)
			VALUES(schedule_seq.nextval, #{dept_id}, #{book_id}, #{sch_title}, #{sch_content},
					TO_DATE(#{start_date}, 'YYYY-MM-DD HH24-MI'), TO_DATE(#{end_date}, 'YYYY-MM-DD HH24-MI'),
					#{sch_group}, #{emp_id})
	</insert>
	
	<!-- 일정 참가자들이 일정을 확인할 수 있도록 DB에 등록 -->
	<insert id="insertParticipant">
		
			INSERT INTO sch_participant
				VALUES(#{emp_id}, #{dept_id}, schedule_seq.currval)

	</insert>
	
	<!-- 일정 수정 -->
	<update id="updateSchedule">
		<![CDATA[
		UPDATE schedule SET sch_title = #{sch_title},
							sch_content = #{sch_content},
							start_date = #{start_date},
							end_date = #{end_date}
							
		]]>
		
		<include refid="booking"/>
		
		<![CDATA[				
			WHERE sch_id = #{sch_id}
		]]>
	</update>
	
	<!-- 회의실 예약 여부를 처리하는 쿼리 -->
	<sql id="booking">
		
		<if test="book_id != null">
			, book_id = #{book_id}
		</if>
		
	</sql>
	
	<!-- 일정 삭제 -->
	<delete id="deleteSchedule">
	
		DELETE schedule WHERE sch_id = #{sch_id}
	
	</delete>
	
	<!-- 일정 목록에서 일정 삭제 -->
	<delete id="deleteParticipant">
		DELETE sch_participant
			WHERE sch_id = #{sch_id}
			AND emp_id = #{emp_id}
	</delete>
	
	
	<!-- 일정 목록 출력 -->
	<select id="getList" resultType="org.shiftworks.domain.ScheduleVO">
	
		<![CDATA[
			SELECT sch_date, p.sch_id as sch_id, p.dept_id as dept_id, book_id, sch_title,
					sch_content, sch_group, p.emp_id emp_id
				FROM (
					SELECT TO_CHAR(TO_DATE(#{periodStart}, 'yyyy-MM-dd') + LEVEL - 1, 'yyyy-MM-dd') AS sch_date
					FROM dual
					CONNECT BY LEVEL <= TO_DATE(#{periodEnd}, 'yyyy-MM-dd')-TO_DATE(#{periodStart}, 'yyyy-MM-dd') + 1
					) cal
				LEFT OUTER JOIN schedule s
				ON sch_date BETWEEN TO_CHAR(start_date, 'yyyy-MM-dd') AND TO_CHAR(end_date, 'yyyy-MM-dd')
				JOIN sch_participant p
				ON p.sch_id = s.sch_id
				AND p.emp_id = #{emp_id}
		]]>
		
		<include refid="selectGroup"/>
		
	</select>
	
	<!-- 그룹별 보기 선택 -->
	<sql id="selectGroup">
		<if test="sch_group != null">
			AND sch_group = #{sch_group}
		</if>
	</sql>
	
	<!-- 일정 검색 -->
	<select id="search" resultType="org.shiftworks.domain.ScheduleVO">
		SELECT s.sch_id as sch_id, sch_title, start_date
			FROM schedule s JOIN sch_participant p
			ON s.sch_id = p.sch_id
			WHERE sch_title LIKE '%'||#{keyword}||'%'
			AND p.emp_id = #{emp_id}
	</select>
	
	<!-- 일정 상세정보 -->
	<select id="getSchedule" resultType="org.shiftworks.domain.ScheduleVO">
		SELECT * FROM schedule
			WHERE sch_id = #{sch_id}
	</select>
	
	<!-- 일정 참가자 리스트 -->
	<select id="getParticipant" resultType="String">
		SELECT emp_id FROM sch_participant
			WHERE sch_id = #{sch_id}
	</select>

	<!-- 메모 불러오기 -->
	<select id="getMemo" resultType="String">
		SELECT memo FROM employee
			WHERE emp_id = #{emp_id}
	</select>
	
	<!-- 메모 작성 및 수정하기 -->
	<update id="updateMemo">
		UPDATE employee SET memo = #{memo}
			WHERE emp_id = #{emp_id}
	</update>
	
	<!-- 같은 부서 근무자 명단 불러오기 -->
	<select id="getWorkerList" resultType="org.shiftworks.domain.WorkScheduleVO">
		SELECT e.emp_id as emp_id, name, start_time, end_time
			FROM employee e JOIN work_sch w
			ON e.emp_id = w.emp_id
			WHERE w.dept_id = #{dept_id}
	</select>
	
	
	<!-- 일정 검색 -->
	<select id="searchBooking" resultType="org.shiftworks.domain.BookingVO">
		SELECT book_id, book_title, book_date
			FROM rsc_booking
			WHERE book_title LIKE '%'||#{keyword}||'%'
	</select>

</mapper>